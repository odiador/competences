#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()
using namespace std;

using ll = long long;
using ld = long double;
using uint = unsigned int;
using ull = unsigned long long;
template <typename T>
using pair2 = pair<T, T>;
using pii = pair<int, int>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;
using vll = vector<ll>;

//#define DEBUG
#define pb push_back
#define mp make_pair

const ll INF = 1e18;

ll gcd(ll a, ll b)
{
    if (a % b == 0)
        return b;
    else
        return gcd(b, a % b);
}

clock_t startTime;
double getCurrentTime()
{
    return (double)(clock() - startTime) / CLOCKS_PER_SEC;
}

void solve(map<string, int> &potencias)
{
    int n;
    cin >> n;
    vector<int> a(n);
    string x;
    /**
     * 5
     * 4 2 2 1 8
     * 2 1 1 0 3
     *
     */
    for (int i = 0; i < n; i++)
    {
        cin >> x;
        a[i] = potencias[x];
    }
    stack<int> s;
    for (int i = 0; i < n; i++)
    {
        int current = a[i];
        // Mientras el tope sea igual al actual, combinarlos
        while (!s.empty() && s.top() == current)
        {
            s.pop();
            current++;  // Duplicar el valor (incrementar el exponente)
        }
        s.push(current);
    }
    
    // Encontrar el mÃ¡ximo en el stack
    int maxValue = 0;
    while (!s.empty())
    {
        maxValue = max(maxValue, s.top());
        s.pop();
    }

    // search the key by value
    for (const auto &entry : potencias)
    {
        if (entry.second == maxValue)
        {
            cout << entry.first << endl;
            break;
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    map<string, int> potencias = {
        {"1", 0},
        {"2", 1},
        {"4", 2},
        {"8", 3},
        {"16", 4},
        {"32", 5},
        {"64", 6},
        {"128", 7},
        {"256", 8},
        {"512", 9},
        {"1024", 10},
        {"2048", 11},
        {"4096", 12},
        {"8192", 13},
        {"16384", 14},
        {"32768", 15},
        {"65536", 16},
        {"131072", 17},
        {"262144", 18},
        {"524288", 19},
        {"1048576", 20},
        {"2097152", 21},
        {"4194304", 22},
        {"8388608", 23},
        {"16777216", 24},
        {"33554432", 25},
        {"67108864", 26},
        {"134217728", 27},
        {"268435456", 28},
        {"536870912", 29},
        {"1073741824", 30},
        {"2147483648", 31},
        {"4294967296", 32},
        {"8589934592", 33},
        {"17179869184", 34},
        {"34359738368", 35},
        {"68719476736", 36},
        {"137438953472", 37},
        {"274877906944", 38},
        {"549755813888", 39},
        {"1099511627776", 40},
        {"2199023255552", 41},
        {"4398046511104", 42},
        {"8796093022208", 43},
        {"17592186044416", 44},
        {"35184372088832", 45},
        {"70368744177664", 46},
        {"140737488355328", 47},
        {"281474976710656", 48},
        {"562949953421312", 49},
        {"1125899906842624", 50},
        {"2251799813685248", 51},
        {"4503599627370496", 52},
        {"9007199254740992", 53},
        {"18014398509481984", 54},
        {"36028797018963968", 55},
        {"72057594037927936", 56},
        {"144115188075855872", 57},
        {"288230376151711744", 58},
        {"576460752303423488", 59},
        {"1152921504606846976", 60},
        {"2305843009213693952", 61},
        {"4611686018427387904", 62},
        {"9223372036854775808", 63},
        {"18446744073709551616", 64},
        {"36893488147419103232", 65},
        {"73786976294838206464", 66},
        {"147573952589676412928", 67},
        {"295147905179352825856", 68},
        {"590295810358705651712", 69},
        {"1180591620717411303424", 70},
        {"2361183241434822606848", 71},
        {"4722366482869645213696", 72},
        {"9444732965739290427392", 73},
        {"18889465931478580854784", 74},
        {"37778931862957161709568", 75},
        {"75557863725914323419136", 76},
        {"151115727451828646838272", 77},
        {"302231454903657293676544", 78},
        {"604462909807314587353088", 79},
        {"1208925819614629174706176", 80},
        {"2417851639229258349412352", 81},
        {"4835703278458516698824704", 82},
        {"9671406556917033397649408", 83},
        {"19342813113834066795298816", 84},
        {"38685626227668133590597632", 85},
        {"77371252455336267181195264", 86},
        {"154742504910672534362390528", 87},
        {"309485009821345068724781056", 88},
        {"618970019642690137449562112", 89},
        {"1237940039285380274899124224", 90},
        {"2475880078570760549798248448", 91},
        {"4951760157141521099596496896", 92},
        {"9903520314283042199192993792", 93},
        {"19807040628566084398385987584", 94},
        {"39614081257132168796771975168", 95},
        {"79228162514264337593543950336", 96},
        {"158456325028528675187087900672", 97},
        {"316912650057057350374175801344", 98},
        {"633825300114114700748351602688", 99},
        {"1267650600228229401496703205376", 100}

    };
    solve(potencias);
    return 0;
}